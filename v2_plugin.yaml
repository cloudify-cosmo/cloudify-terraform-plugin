plugins:
  tf:
    executor: central_deployment_agent
    package_name: cloudify-terraform-plugin
    package_version: 0.20.3
dsl_definitions:
  terraform_config:
    terraform_config: &id001
      type: cloudify.types.terraform.DirectoryConfig
      required: false
data_types:
  cloudify.types.terraform.DirectoryConfig:
    properties:
      executable_path:
        type: string
        required: false
      storage_path:
        type: string
        required: false
      plugins_dir:
        type: string
        required: false
  cloudify.types.terraform.InstallConfig:
    properties:
      use_existing_resource:
        type: boolean
        default: false
      installation_source:
        type: string
        default: https://releases.hashicorp.com/terraform/1.4.2/terraform_1.4.2_linux_amd64.zip
      plugins:
        default: {}
  cloudify.types.terraform.Backend:
    properties:
      name:
        type: string
        required: false
      options:
        required: false
      credentials:
        required: false
  cloudify.types.terraform.Provider:
    properties:
      filename:
        type: string
        required: false
        default: provider.tf
      providers:
        type: list
        required: false
  cloudify.types.terraform.RequiredProviders:
    properties:
      filename:
        type: string
        required: false
        default: versions.tf.json
      required_providers:
        type: dict
        required: false
  cloudify.types.terraform.SourceSpecification:
    properties:
      location:
        type: string
        required: true
      username:
        type: string
        required: false
      password:
        type: string
        required: false
  cloudify.types.terraform.RootModule:
    properties:
      source:
        type: cloudify.types.terraform.SourceSpecification
        required: true
      source_path:
        type: string
        default: ''
      backend:
        type: cloudify.types.terraform.Backend
        default: {}
      provider:
        type: cloudify.types.terraform.Provider
        default: {}
      required_providers:
        type: cloudify.types.terraform.RequiredProviders
        default: {}
      variables:
        required: false
        default: {}
      environment_variables:
        required: false
        default: {}
      flags_override:
        type: list
        default: []
      log_stdout:
        type: boolean
        default: true
      tfvars:
        type: string
        required: false
      store_output_secrets:
        type: dict
        required: false
      obfuscate_sensitive:
        type: boolean
        default: false
  cloudify.types.terraform.tfsec:
    properties:
      installation_source:
        type: string
        required: false
        default: https://github.com/aquasecurity/tfsec/releases/download/v1.1.3/tfsec-linux-amd64
      executable_path:
        type: string
        required: false
      config:
        required: false
      flags_override:
        type: list
        default:
          - soft_fail
        required: false
      enable:
        type: boolean
        default: false
  cloudify.types.terraform.opa:
    properties:
      installation_source:
        type: string
        required: false
        default: https://github.com/open-policy-agent/opa/releases/download/v0.47.4/opa_linux_amd64_static
      executable_path:
        type: string
        required: false
      config:
        required: false
      policy_bundles:
        required: false
      flags_override:
        type: list
        required: false
      enable:
        type: boolean
        default: false
  cloudify.types.terraform.tflint:
    properties:
      installation_source:
        type: string
        default: https://github.com/terraform-linters/tflint/releases/download/v0.34.1/tflint_linux_amd64.zip
        required: false
      executable_path:
        type: string
        required: false
      config:
        required: false
      flags_override:
        type: list
        default:
          - loglevel: debug
        required: false
      env:
        type: dict
        required: false
      enable:
        type: boolean
        default: false
  cloudify.types.terraform.terratag:
    properties:
      installation_source:
        type: string
        default: https://github.com/env0/terratag/releases/download/v0.1.35/terratag_0.1.35_linux_amd64.tar.gz
        required: false
      executable_path:
        type: string
        required: false
      tags:
        type: dict
        required: false
        default: {}
      flags_override:
        type: list
        required: false
      enable:
        type: boolean
        default: false
  cloudify.types.terraform.infracost:
    properties:
      installation_source:
        type: string
        default: https://github.com/infracost/infracost/releases/download/v0.10.8/infracost-linux-amd64.tar.gz
        required: false
      executable_path:
        type: string
        required: false
      api_key:
        type: string
        default: ''
      enable:
        type: boolean
        default: false
node_types:
  cloudify.nodes.terraform:
    derived_from: cloudify.nodes.SoftwareComponent
    properties:
      terraform_config: *id001
      resource_config:
        type: cloudify.types.terraform.InstallConfig
        required: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: tf.cloudify_tf.tasks.install
        delete:
          implementation: tf.cloudify_tf.tasks.uninstall
  cloudify.nodes.terraform.Module:
    derived_from: cloudify.nodes.ApplicationModule
    properties:
      resource_config:
        type: cloudify.types.terraform.RootModule
        required: true
      max_runtime_property_size:
        type: integer
        default: 1000000
      max_stored_filesize:
        type: integer
        default: 1000000
      store_plugins_dir:
        type: boolean
        default: false
      provider_upgrade:
        type: boolean
        default: false
      general_executor_process:
        type: dict
        default:
          max_sleep_time: 300
      tflint_config:
        type: cloudify.types.terraform.tflint
      tfsec_config:
        type: cloudify.types.terraform.tfsec
      terratag_config:
        type: cloudify.types.terraform.terratag
      infracost_config:
        type: cloudify.types.terraform.infracost
      opa_config:
        type: cloudify.types.terraform.opa
    interfaces:
      cloudify.interfaces.validation:
        check_status:
          implementation: tf.cloudify_tf.tasks.check_status
      cloudify.interfaces.lifecycle:
        create:
          implementation: tf.cloudify_tf.tasks.setup_linters
        configure:
          implementation: tf.cloudify_tf.tasks.apply
        start:
          implementation: tf.cloudify_tf.tasks.state_pull
        delete:
          implementation: tf.cloudify_tf.tasks.destroy
        pull:
          implementation: tf.cloudify_tf.tasks.state_pull
        heal:
          implementation: tf.cloudify_tf.tasks.reload_template
        update:
          implementation: tf.cloudify_tf.tasks.reload_template
          inputs:
            source: &id002
              type: string
              default: { get_attribute: [SELF, last_source_location] }
            source_path: &id003
              type: string
              default: { get_property: [SELF, resource_config, source_path] }
            variables: &id004
              type: dict
              default: { get_property: [SELF, resource_config, variables] }
            environment_variables: &id005
              type: dict
              default: { get_property: [SELF, resource_config, environment_variables] }
            destroy_previous: &id006
              type: boolean
              default: false
        check_drift:
          implementation: tf.cloudify_tf.tasks.check_drift
      terraform:
        pull:
          implementation: tf.cloudify_tf.tasks.state_pull
        plan:
          implementation: tf.cloudify_tf.tasks.plan
          inputs:
            source:
              default: { get_property: [SELF, resource_config, source] }
            source_path:
              default: { get_property: [SELF, resource_config, source_path] }
            force:
              default: false
        tfsec:
          implementation: tf.cloudify_tf.tasks.tfsec
          inputs:
            tfsec_config:
              default: { get_property: [SELF, tfsec_config] }
        tflint:
          implementation: tf.cloudify_tf.tasks.tflint
          inputs:
            tflint_config:
              default: { get_property: [SELF, tflint_config] }
        terratag:
          implementation: tf.cloudify_tf.tasks.terratag
          inputs:
            terratag_config:
              default: { get_property: [SELF, terratag_config] }
        reload:
          implementation: tf.cloudify_tf.tasks.reload_template
          inputs:
            source: *id002
            source_path: *id003
            variables: *id004
            environment_variables: *id005
            destroy_previous: *id006
        refresh:
          implementation: tf.cloudify_tf.tasks.state_pull
        import_resource:
          implementation: tf.cloudify_tf.tasks.import_resource
          inputs:
            source:
              type: string
              default: { get_attribute: [SELF, last_source_location] }
            source_path:
              type: string
              default: { get_property: [SELF, resource_config, source_path] }
            variables:
              type: dict
              default: {}
            environment_variables:
              type: dict
              default: {}
            resource_address:
              type: string
              default: ''
            resource_id:
              type: string
              default: ''
        infracost:
          implementation: tf.cloudify_tf.tasks.infracost
          inputs:
            infracost_config:
              default: { get_property: [SELF, infracost_config] }
        opa:
          implementation: tf.cloudify_tf.tasks.evaluate_opa_policy
          inputs:
            decision:
              default: terraform/deny
            opa_config:
              default: { get_property: [SELF, opa_config] }
        migrate_state:
          implementation: tf.cloudify_tf.tasks.migrate_state
          inputs:
            backend:
              default: { get_property: [SELF, resource_config, backend] }
            backend_config:
              type: dict
              default: {}
relationships:
  cloudify.relationships.terraform.run_on_host:
    derived_from: cloudify.relationships.connected_to
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        preconfigure:
          implementation: tf.cloudify_tf.tasks.set_directory_config
  cloudify.terraform.relationships.run_on_host:
    derived_from: cloudify.relationships.terraform.run_on_host
workflows:
  refresh_terraform_resources:
    mapping: tf.cloudify_tf.workflows.refresh_resources
    availability_rules:
      node_instances_active:
        - all
        - partial
      node_types_required:
        - cloudify.nodes.terraform.Module
    parameters:
      node_instance_ids: &id007
        type: list
        default: []
      node_ids: &id008
        type: list
        default: []
  terraform_plan:
    mapping: tf.cloudify_tf.workflows.terraform_plan
    availability_rules:
      node_instances_active:
        - all
        - partial
      node_types_required:
        - cloudify.nodes.terraform.Module
    parameters:
      node_instance_ids: *id007
      node_ids: *id008
      source: &id009
        default: ''
      source_path: &id010
        type: string
        default: ''
      variables: &id011
        type: dict
        default: {}
      environment_variables: &id012
        type: dict
        default: {}
  reload_terraform_template:
    mapping: tf.cloudify_tf.workflows.reload_resources
    availability_rules:
      node_instances_active:
        - all
        - partial
      node_types_required:
        - cloudify.nodes.terraform.Module
    parameters:
      node_instance_ids: *id007
      node_ids: *id008
      source: *id009
      source_path: *id010
      variables: *id011
      environment_variables: *id012
      destroy_previous:
        type: boolean
        default: false
      force:
        type: boolean
        default: false
  update_terraform_binary:
    mapping: tf.cloudify_tf.workflows.update_terraform_binary
    availability_rules:
      node_instances_active:
        - all
        - partial
      node_types_required:
        - cloudify.nodes.terraform
    parameters:
      node_instance_ids: *id007
      node_ids: *id008
      installation_source:
        type: string
  import_terraform_resource:
    mapping: tf.cloudify_tf.workflows.import_resource
    availability_rules:
      node_instances_active:
        - all
        - partial
      node_types_required:
        - cloudify.nodes.terraform.Module
    parameters:
      node_instance_ids: *id007
      node_ids: *id008
      source: *id009
      source_path: *id010
      variables: *id011
      environment_variables: *id012
      resource_address:
        type: string
      resource_id:
        type: string
  run_infracost:
    mapping: tf.cloudify_tf.workflows.run_infracost
    availability_rules:
      node_instances_active:
        - all
        - partial
      node_types_required:
        - cloudify.nodes.terraform.Module
    parameters:
      node_instance_ids: *id007
      node_ids: *id008
      source: *id009
      source_path: *id010
      variables: *id011
      environment_variables: *id012
      infracost_config:
        type: cloudify.types.terraform.infracost
        default: {}
  migrate_state:
    mapping: tf.cloudify_tf.workflows.migrate_state
    parameters:
      node_instance_ids: *id007
      node_ids: *id008
      backend:
        type: cloudify.types.terraform.Backend
      backend_config:
        type: dict
        default: {}
blueprint_labels:
  obj-type:
    values:
      - tf
labels:
  obj-type:
    values:
      - tf
